
사용할 수 있는 GPU는 1개 입니다.
/opt/conda/lib/python3.8/site-packages/sklearn/model_selection/_split.py:666: UserWarning: The least populated class in y has only 1 members, which is less than n_splits=5.
  warnings.warn(("The least populated class in y has only %d"
==================================================
현재 적용되고 있는 데이터 클래스는 EntityTokensDataset입니다.
==================================================
==================================================
현재 적용되고 있는 모델 클래스는 EntityTokensModel입니다.
==================================================
Some weights of the model checkpoint at klue/roberta-large were not used when initializing RobertaModel: ['lm_head.dense.weight', 'lm_head.decoder.weight', 'lm_head.bias', 'lm_head.layer_norm.weight', 'lm_head.dense.bias', 'lm_head.layer_norm.bias', 'lm_head.decoder.bias']
- This IS expected if you are initializing RobertaModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing RobertaModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
Some weights of RobertaModel were not initialized from the model checkpoint at klue/roberta-large and are newly initialized: ['roberta.pooler.dense.weight', 'roberta.pooler.dense.bias']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
  0%|                                                                                                                    | 0/3 [00:00<?, ?it/s]/opt/conda/lib/python3.8/site-packages/transformers/tokenization_utils_base.py:2198: FutureWarning: The `pad_to_max_length` argument is deprecated and will be removed in a future version, use `padding=True` or `padding='longest'` to pad to the longest sequence in the batch, or use `padding='max_length'` to pad to a max length. In this case, you can give a specific length with `max_length` (e.g. `max_length=45`) or leave max_length to None to pad to the maximal input size of the model (e.g. 512 for Bert).
  warnings.warn(
==================================================
현재 적용되고 있는 트레이너는 EntityTokensTrainer입니다.
==================================================
torch.Size([32])
100%|████████████████████████████████████████████████████████████████████████████████████████| 3/3 [00:02<00:00,  1.27it/s, loss=3.31, lr=5e-5]
  0%|                                                                                                                    | 0/1 [00:00<?, ?it/s]
Traceback (most recent call last):
  File "train.py", line 104, in <module>
    main(config_w)
  File "train.py", line 86, in main
    trainer.train()
  File "/opt/ml/seonjongbaseline/trainer/EntityTokensTrainer.py", line 39, in train
    self._valid_epoch(epoch)
  File "/opt/ml/seonjongbaseline/trainer/EntityTokensTrainer.py", line 89, in _valid_epoch
    entity_embed2 = valid_batch['entity_embde2'].to(self.device))
KeyError: 'entity_embde2'
torch.Size([32, 270, 1024])
torch.Size([32, 1024])
torch.Size([32, 1024])
torch.Size([32, 2048])
torch.Size([32, 30])
torch.Size([32, 30])
torch.Size([32])
torch.Size([32])
torch.Size([32, 270, 1024])
torch.Size([32, 1024])
torch.Size([32, 1024])
torch.Size([32, 2048])
torch.Size([32, 30])
torch.Size([32, 30])
torch.Size([32])
torch.Size([16])
torch.Size([16, 270, 1024])
torch.Size([16, 1024])
torch.Size([16, 1024])
torch.Size([16, 2048])
torch.Size([16, 30])
torch.Size([16, 30])
torch.Size([16])